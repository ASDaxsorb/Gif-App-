{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategory","useState","inputText","setInputText","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","proptTypes","PropTypes","func","isRequired","getGifs","category","a","END_POINT","encodeURI","fetch","response","json","data","gifs","map","img","id","title","url","images","original","GifItem","className","src","alt","GifGrid","loading","setGifs","useEffect","imgs","useFetchGifs","gif","GifExpertApp","setCategories","ReactDOM","render","document","getElementById"],"mappings":"mLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6CCJRQ,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAeA,OACE,sBAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEEJ,EAAUK,OAAOC,OAAS,IAC5BR,GAAY,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OACzCN,EAAa,MAKf,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAWU,SAflB,SAAAP,GACrBF,EAAaE,EAAEQ,OAAOF,aAmB1BZ,EAAYe,WAAa,CACvBd,YAAae,IAAUC,KAAKC,YAGflB,Q,+BC9BFmB,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,0FACgFC,UACnGH,GAFmB,qBAKEI,MAAMF,GALR,cAKfG,EALe,gBAOEA,EAASC,OAPX,uBAObC,EAPa,EAObA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,SAASF,QAZT,kBAgBdL,GAhBc,4CAAH,sDCSLQ,EATC,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACxB,OACE,qBAAII,UAAU,6CAAd,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,mBAAGK,UAAU,eAAb,SAA6BL,QCgBpBQ,EAjBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACjB,ECD0B,SAAAA,GAC1B,MAAwBlB,mBAAS,CAC/ByB,KAAM,GACNc,SAAS,IAFX,mBAAOb,EAAP,KAAac,EAAb,KAWA,OANAC,qBAAU,WACRxB,EAAQC,GAAU1B,MAAK,SAAAkD,GACrBF,EAAQ,CAAEf,KAAMiB,EAAMH,SAAS,SAEhC,CAACrB,IAEGQ,EDXmBiB,CAAazB,GAA/BO,EAAR,EAAQA,KAAMc,EAAd,EAAcA,QAEd,OACE,sBAAKJ,UAAU,iBAAf,UACE,oBAAIA,UAAU,wCAAd,SAAuDjB,IACtDqB,GAAW,mBAAGJ,UAAU,mCAAb,SAAiD,gBAC5D,GACD,oBAAIA,UAAU,YAAd,SACGV,EAAKE,KAAI,SAAAiB,GAAG,OACX,cAAC,EAAD,eAA0BA,GAAZA,EAAIf,aEObgB,EAhBM,WACnB,MAAoC7C,mBAAS,CAAC,sBAA9C,mBAAOQ,EAAP,KAAmBsC,EAAnB,KACA,OACE,qCACE,8CACA,cAAC,EAAD,CAAa/C,YAAa+C,IAC1B,6BACGtC,EAAWmB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,QAGlB,2BCVN6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1D7D,M","file":"static/js/main.b92bab6a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategory }) => {\n  const [inputText, setInputText] = useState('')\n\n  const handleOnChange = e => {\n    setInputText(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    if (inputText.trim().length > 0) {\n      setCategory(categories => [inputText, ...categories])\n      setInputText('')\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputText} onChange={handleOnChange} />\n    </form>\n  )\n}\n\nAddCategory.proptTypes = {\n  setCategory: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGifs = async category => {\n  const END_POINT = `https://api.giphy.com/v1/gifs/search?api_key=bZhQPhh6hzFwcvX3WxhAvLmScIDwxjJW&q=${encodeURI(\n    category\n  )}&limit=5`\n\n  const response = await fetch(END_POINT)\n\n  const { data } = await response.json()\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.original.url,\n    }\n  })\n\n  return gifs\n}\n","const GifItem = ({ title, url }) => {\n  return (\n    <li className=\"card animate__animated animate__zoomInDown\">\n      <img src={url} alt={title} />\n      <p className=\"card__title \">{title}</p>\n    </li>\n  )\n}\n\nexport default GifItem\n","import { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifItem from './GifItem'\n\nconst GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category)\n\n  return (\n    <div className=\"grid-container\">\n      <h3 className=\"animate__animated animate__fadeInLeft\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">{'Cargando...'}</p>}\n      {''}\n      <ol className=\"card-grid\">\n        {data.map(gif => (\n          <GifItem key={gif.id} {...gif} />\n        ))}\n      </ol>\n    </div>\n  )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = category => {\n  const [gifs, setGifs] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setGifs({ data: imgs, loading: false })\n    })\n  }, [category])\n\n  return gifs\n}\n","import { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['League of legends'])\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategory={setCategories} />\n      <ul>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ul>\n      <hr />\n    </>\n  )\n}\n\nexport default GifExpertApp\n","import './index.css'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}